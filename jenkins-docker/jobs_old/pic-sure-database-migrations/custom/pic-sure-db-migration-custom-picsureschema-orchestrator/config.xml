<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script> pipeline { 
  agent any
  stages {
  
  
  
 	stage(&apos;Get Docker Image Tags&apos;){ 
	        steps {  
	             sh  &quot;curl &apos;https://registry.hub.docker.com/v2/repositories/dbmi/pic-sure-db-migrations/tags/&apos;|jq &apos;.\&quot;results\&quot;[][\&quot;name\&quot;]&apos; &gt; tags.txt &quot;
	             sh &quot;cat tags.txt&quot; 
	        } 
	 }
     
         
     stage(&quot;Read Tags, build List for UI&quot;) {
            steps {
                script {
                    env.DOCKER_IMAGE_TAGS = readFile &apos;tags.txt&apos;
                    env.DOCKER_IMAGE_TAGS = env.DOCKER_IMAGE_TAGS.replace(&quot;\&quot;&quot;, &quot;&quot;)
                    env.DOCKER_IMAGE_RELEASE_TAG = input message: &apos;Please choose the Docker Release Tag&apos;, ok: &apos;Release!&apos;,
                            parameters: [choice(name: &apos;DOCKER_IMAGE_RELEASE_TAG&apos;, choices: env.DOCKER_IMAGE_TAGS, description: &apos;What is the release scope?&apos;)]
                    
                }
                echo &quot;Will build an Container from this tag: ${env.DOCKER_IMAGE_RELEASE_TAG}&quot;
            }
     }   
    
    
     stage(&apos;Pull Auth Docker Image by Tag&apos;){ 
        steps { 
        	 sh &quot;docker pull dbmi/pic-sure-db-migrations:${env.DOCKER_IMAGE_RELEASE_TAG}&quot; 
        } 
     }    
    
     stage(&apos;Clean and Start the Base Container&apos;){ 
        steps { 
        
             
        
        	 sh &apos;&apos;&apos;
        	 	CONTAINER_NAME=&quot;custom_picsure_orchestrator_container&quot;
				CONTAINER_FOUND=&quot;$(docker ps --all --quiet --filter=name=&quot;$CONTAINER_NAME&quot;)&quot;
				if [ -n &quot;$CONTAINER_FOUND&quot; ]; then
  					docker stop $CONTAINER_FOUND &amp;&amp; docker rm $CONTAINER_FOUND
				fi			
			   
			&apos;&apos;&apos; 
			
			sh &quot;docker run --name custom_picsure_orchestrator_container -v /flyway-configs:/flyway-configs  -d dbmi/pic-sure-db-migrations:${env.DOCKER_IMAGE_RELEASE_TAG}&quot;	 
			
            sleep(time:15,unit:&quot;SECONDS&quot;)
        } 
     }  
     
    stage(&apos;Run DB Migration&apos;){ 
        steps {  
        	 sh &apos;&apos;&apos;
        	 	docker exec -i custom_picsure_orchestrator_container bash -c \&quot;/picsure-db-migrations/scripts/custom/picsure/picsure-custom-migration-orchestrator.sh\&quot;
			&apos;&apos;&apos; 

        } 
    }        
 
    stage(&apos;Clean up resources&apos;){ 
        steps {  
        	 sh &apos;&apos;&apos;
        	 	CONTAINER_NAME=&quot;custom_picsure_orchestrator_container&quot;
				CONTAINER_FOUND=&quot;$(docker ps --all --quiet --filter=name=&quot;$CONTAINER_NAME&quot;)&quot;
				if [ -n &quot;$CONTAINER_FOUND&quot; ]; then
  					docker stop $CONTAINER_FOUND &amp;&amp; docker rm $CONTAINER_FOUND
				fi 
			&apos;&apos;&apos; 

        } 
    }     
   
           
    stage(&apos;Clean Workspace&apos;){ 
        steps {  
            cleanWs()
        } 
    }           
    
  }
  
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>