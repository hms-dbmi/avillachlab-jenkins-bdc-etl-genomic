<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.syhuang.hudson.plugins.listgitbranchesparameter.ListGitBranchesParameterDefinition plugin="list-git-branches-parameter@0.0.7">
          <name>PIC_SURE_AUTH_BRANCH_NAME</name>
          <uuid>64101aff-5a70-4ff0-8aec-f30dc52d415d</uuid>
          <remoteURL>https://github.com/hms-dbmi/pic-sure-db-datastage-custom-migrations.git</remoteURL>
          <credentialsId>GITHUB_CREDENTIALS</credentialsId>
          <defaultValue></defaultValue>
          <type>PT_BRANCH_TAG</type>
          <tagFilter>origin/(.*)</tagFilter>
          <branchFilter>origin/(.*)</branchFilter>
          <sortMode>NONE</sortMode>
          <selectedValue>NONE</selectedValue>
          <quickFilterEnabled>false</quickFilterEnabled>
          <listSize>5</listSize>
        </com.syhuang.hudson.plugins.listgitbranchesparameter.ListGitBranchesParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script> pipeline { 
  agent any
  stages {
    
    
    
     stage(&apos;Pull Base Container&apos;){ 
        steps { 
        	 sh &quot;docker pull dbmi/pic-sure-db-migrations:base_image&quot; 
        } 
     }    
    
     stage(&apos;Clean and Start the Base Container&apos;){ 
        steps { 
        
        	 sh &apos;&apos;&apos;
        	 	CONTAINER_NAME=&quot;custom_auth_image_container&quot;
				CONTAINER_FOUND=&quot;$(docker ps --all --quiet --filter=name=&quot;$CONTAINER_NAME&quot;)&quot;
				if [ -n &quot;$CONTAINER_FOUND&quot; ]; then
  					docker stop $CONTAINER_FOUND &amp;&amp; docker rm $CONTAINER_FOUND
				fi			
				docker run --name custom_auth_image_container -d dbmi/pic-sure-db-migrations:base_image		 
			&apos;&apos;&apos; 
			
            sleep(time:15,unit:&quot;SECONDS&quot;)
        } 
     }    

    stage(&apos;Prepare db changes for pic-sure-auth-microapp in the container&apos;){ 
        environment {
            GITHUB_CREDENTIALS = credentials(&apos;GITHUB_CREDENTIALS&apos;)
            //def password = &quot;$GITHUB_CREDENTIALS_PSW&quot; 
            //def CLEANED_PASSWORD = password.replaceAll(&apos;@&apos;,&apos;%40&apos;) 
            
        }    
        
        
        steps { 
        
			sh &quot;docker exec -i custom_auth_image_container bash -c \&quot;/picsure-db-migrations/scripts/custom/auth/get-auth-custom-schema-from-repo.sh https://$GITHUB_CREDENTIALS_USR:$GITHUB_CREDENTIALS_PSW@github.com/hms-dbmi/pic-sure-db-datastage-custom-migrations.git ${env.PIC_SURE_AUTH_BRANCH_NAME}\&quot;&quot;			
        
        } 
    } 
    
    stage(&apos;Commit changes&apos;){ 
        steps { 
            sh &quot;docker commit -m &apos;jenkins job commit&apos; custom_auth_image_container dbmi/pic-sure-db-migrations:authdb_custom_image_v1.0&quot;
        } 
    }    
    
    
    stage(&apos;Push Base Docker Image to Docker Hub&apos;){
        environment {
            DOCKER_HUB_CREDENTIALS = credentials(&apos;DOCKER_HUB_CREDENTIALS&apos;)
        }
        
        
        steps {  
            sh &quot;docker login -u $DOCKER_HUB_CREDENTIALS_USR -p $DOCKER_HUB_CREDENTIALS_PSW&quot;
            sh &quot;docker push dbmi/pic-sure-db-migrations:authdb_custom_image_v1.0&quot; 
        }     
        
    }     
    
    stage(&apos;Clean up&apos;){ 
        steps {  
        	 sh &apos;&apos;&apos;
        	 	CONTAINER_NAME=&quot;custom_auth_image_container&quot;
				CONTAINER_FOUND=&quot;$(docker ps --all --quiet --filter=name=&quot;$CONTAINER_NAME&quot;)&quot;
				if [ -n &quot;$CONTAINER_FOUND&quot; ]; then
  					docker stop $CONTAINER_FOUND &amp;&amp; docker rm $CONTAINER_FOUND
				fi 
			&apos;&apos;&apos; 

        } 
    }     
    
    stage(&apos;Clean Workspace&apos;){ 
        steps {  
            cleanWs()
        } 
    }      
   
  }          
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>