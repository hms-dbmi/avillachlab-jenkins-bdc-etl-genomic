<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>pipeline {
 
  agent any
  stages {
  
  
    stage(&apos;Build/ReBuild MySQL Database&apos;){ 
        steps { 
        
        	 sh &apos;&apos;&apos;
        	 	CONTAINER_NAME=&quot;pic_sure_mysqldb&quot;
				CONTAINER_FOUND=&quot;$(docker ps --all --quiet --filter=name=&quot;$CONTAINER_NAME&quot;)&quot;
				if [ -n &quot;$CONTAINER_FOUND&quot; ]; then
  					docker stop $CONTAINER_FOUND &amp;&amp; docker rm $CONTAINER_FOUND
				fi			
				docker run -d -p 3306:3306 -v /tmp/docker/mySql:/var/lib/mysql -v /flyway-configs:/flyway-configs --name=pic_sure_mysqldb -e MYSQL_ROOT_PASSWORD=mysql mysql:5.7
			&apos;&apos;&apos;
			
            sleep(time:25,unit:&quot;SECONDS&quot;)
            
        	 sh &apos;&apos;&apos;  
        	    CONTAINER_NAME=&quot;pic_sure_mysqldb&quot;
				docker exec $CONTAINER_NAME  bash -c &apos; mysql -u root -p$MYSQL_ROOT_PASSWORD -e \&quot;drop database IF EXISTS auth; create database auth\&quot; &apos;
				docker exec $CONTAINER_NAME  bash -c &apos; mysql -u root -p$MYSQL_ROOT_PASSWORD -e \&quot;drop database IF EXISTS irct; create database irct\&quot; &apos;
				docker exec $CONTAINER_NAME  bash -c &apos; mysql -u root -p$MYSQL_ROOT_PASSWORD -e \&quot;drop database IF EXISTS picsure; create database picsure\&quot; &apos;
				
				docker inspect -f &apos;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&apos; $CONTAINER_NAME
			&apos;&apos;&apos;            
            
            
             
        }  
    } 
    
    stage(&apos;Clean Workspace&apos;){ 
        steps {  
            cleanWs()
        } 
    }      
         
    
  } 
  
} </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>