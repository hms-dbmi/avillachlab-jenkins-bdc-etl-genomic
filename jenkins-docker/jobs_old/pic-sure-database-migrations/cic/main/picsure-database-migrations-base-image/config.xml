<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>def propsJSON = &apos;&apos;

pipeline {
 
  agent any 
  
  
  environment {
     def BUILD_TIMESTAMP = sh(script: &quot;echo `date +%Y%m%d%H%M%S`&quot;, returnStdout: true).trim()
     def DOCKER_IMAGE_NAME  = &quot;picsure-db-migration-base-image.tar.gz&quot; 
     def CONTAINER_NAME=&quot;base_image_container&quot; 
     def BASE_IMAGE_TAG_NAME=&quot;picsure-db-migration-base-image&quot;  
     
     def jsonObj = readJSON file: &apos;/cic-config.json&apos;  
     def S3_PROFILE_NAME  = sh(script: &quot;echo ${jsonObj.s3_profiles.datastage_prod.s3_profile_name}&quot;, returnStdout:true).trim().replaceAll(&quot;\\[|\\]&quot;, &quot;&quot;)
     def S3_BUCKET_NAME  = sh(script: &quot;echo ${jsonObj.s3_profiles.datastage_prod.s3_bucket_name}&quot;, returnStdout:true).trim().replaceAll(&quot;\\[|\\]&quot;, &quot;&quot;)
     def S3_BUCKET_PROPERTIES_FILE_NAME  = sh(script: &quot;echo ${jsonObj.s3_profiles.datastage_prod.s3_bucket_properties_file_name}&quot;, returnStdout:true).trim().replaceAll(&quot;\\[|\\]&quot;, &quot;&quot;)
           
     def PICSURE_DB_MIGRATIONS_REPO=&quot;https://github.com/hms-dbmi/pic-sure-db-migrations.git&quot; 
  }  
  
  stages {
  
    stage(&apos;Prechecks&apos;){ 
        steps {
        	sh &apos;&apos;&apos;
        	
        		echo $S3_PROFILE_NAME
        		echo $S3_BUCKET_NAME
        		echo $S3_BUCKET_PROPERTIES_FILE_NAME
        	
        	&apos;&apos;&apos;
            sh &quot;aws s3 ls --profile $S3_PROFILE_NAME&quot;
        } 
    }  
    
    stage(&apos;Dowload S3 Properties&apos;){ 
        steps {
            sh &apos;&apos;&apos;
            	aws s3 cp s3://$S3_BUCKET_NAME/$S3_BUCKET_PROPERTIES_FILE_NAME . --profile $S3_PROFILE_NAME
            &apos;&apos;&apos; 
        } 
    }
    
    stage(&apos;Checkout code&apos;){ 
        steps {
            sh &apos;git clone $PICSURE_DB_MIGRATIONS_REPO pic-sure-db-migrations&apos;
        } 
    }  
    
    stage(&apos;Build Base Docker Image&apos;){ 
        steps { 
            dir(&apos;pic-sure-db-migrations/schema-migrations/docker/baseimage&apos;) {  
                sh &quot;docker build -f DockerFile -t dbmi/picsure-db-migrations:$BASE_IMAGE_TAG_NAME .&quot; 
            } 
        } 
    } 
    
    stage(&apos;Clean and Start the Base Container&apos;){ 
        steps {  
        	 sh &apos;&apos;&apos; 
				CONTAINER_FOUND=&quot;$(docker ps --all --quiet --filter=name=&quot;$CONTAINER_NAME&quot;)&quot;
				if [ -n &quot;$CONTAINER_FOUND&quot; ]; then
  					docker stop $CONTAINER_FOUND &amp;&amp; docker rm $CONTAINER_FOUND
				fi			
				docker run --name &quot;$CONTAINER_NAME&quot; -d dbmi/picsure-db-migrations:$BASE_IMAGE_TAG_NAME		 
			&apos;&apos;&apos; 
			
            sleep(time:15,unit:&quot;SECONDS&quot;)
        } 
     }    
    
    stage(&apos;Copy S3 Properties to Container and Save Image&apos;){ 
        steps {
            sh &apos;&apos;&apos;
            	docker cp $S3_BUCKET_PROPERTIES_FILE_NAME &quot;$CONTAINER_NAME&quot;:/$S3_BUCKET_PROPERTIES_FILE_NAME 
            	docker exec -i $CONTAINER_NAME bash -c \&quot;python3 /picsure-db-migrations/scripts/build_properties.py\&quot;
            	docker commit $CONTAINER_NAME dbmi/picsure-db-migrations:$BASE_IMAGE_TAG_NAME
            &apos;&apos;&apos; 
        } 
    }           
     
     
	stage(&apos;Save Docker Image&apos;){ 
        steps {   
            sh &quot;echo ${env.DOCKER_IMAGE_NAME}&quot;
 			sh &quot;docker save dbmi/picsure-db-migrations:$BASE_IMAGE_TAG_NAME | gzip &gt; ${env.DOCKER_IMAGE_NAME}&quot;  
        } 
    }  
    
    
    stage(&apos;Push Docker Image to S3&apos;){  
        steps {   
 			sh &quot;aws s3 --sse=AES256 cp ${env.DOCKER_IMAGE_NAME} s3://$S3_BUCKET_NAME/${env.DOCKER_IMAGE_NAME} --profile $S3_PROFILE_NAME&quot; 
        } 
    }      
    
    stage(&apos;Remove Container&apos;){ 
        steps {  
        	 sh &apos;&apos;&apos; 
				CONTAINER_FOUND=&quot;$(docker ps --all --quiet --filter=name=&quot;$CONTAINER_NAME&quot;)&quot;
				if [ -n &quot;$CONTAINER_FOUND&quot; ]; then
  					docker stop $CONTAINER_FOUND &amp;&amp; docker rm $CONTAINER_FOUND
				fi	 
			&apos;&apos;&apos;  
        } 
     }     
  }
  
  post { 
        always { 
            cleanWs()
        }
  }  
  
  
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>