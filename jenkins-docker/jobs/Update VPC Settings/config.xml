<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>R53_Zone_ID</name>
          <description></description>
          <defaultValue>Z08886171CDE1KG17OIX6</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>vpc_a</name>
          <description></description>
          <defaultValue>vpc-0b12dc11052fb6432</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>vpc_b</name>
          <description></description>
          <defaultValue>vpc-08c11c27cd91e62fd</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db-subnet-group-name-a</name>
          <description></description>
          <defaultValue>main-a</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db-subnet-group-name-b</name>
          <description></description>
          <defaultValue>main-b</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo $JENKINS_HOME

# Describe subnets in specified VPCs in the prod account

aws sts assume-role --duration-seconds 900 --role-arn $arn_role_app --role-session-name &quot;teardown-rebuild&quot; &gt; assume-role-output.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

aws ec2 --region us-east-1 describe-subnets

aws ec2 --region us-east-1 describe-subnets --filters &quot;Name=vpc-id,Values=$vpc_a&quot; &gt; subnets_a.json
cat subnets_a.json
aws ec2 --region us-east-1 describe-subnets --filters &quot;Name=vpc-id,Values=$vpc_b&quot; &gt; subnets_b.json
cat subnets_b.json

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
</command>
    </hudson.tasks.Shell>
    <hudson.plugins.groovy.SystemGroovy plugin="groovy@2.2">
      <source class="hudson.plugins.groovy.StringSystemScriptSource">
        <script plugin="script-security@1.68">
          <script>import groovy.json.*
import java.io.*

buildSubnetVariablesFileForStack(&quot;a&quot;);
buildSubnetVariablesFileForStack(&quot;b&quot;);

void buildSubnetVariablesFileForStack(String stackId){
def JsonSlurper js = new JsonSlurper()

def subnetsResponse = js.parse(new File(&quot;/var/jenkins_home/workspace/Update VPC Settings/subnets_${stackId}.json&quot;))
 
def subnetNames = [
  &quot;edge-subnet-us-east-1a&quot;,
  &quot;edge-subnet-us-east-1b&quot;,
  &quot;app-subnet-us-east-1a&quot;,
  &quot;app-subnet-us-east-1b&quot;,
  &quot;db-subnet-us-east-1a&quot;,
  &quot;db-subnet-us-east-1b&quot;,
]

def subnetAWSNames = [
  &quot;edge-subnet-us-east-1a&quot;:&quot;Web-Subnet-AZ1&quot;,
  &quot;edge-subnet-us-east-1b&quot;:&quot;Web-Subnet-AZ2&quot;,
  &quot;app-subnet-us-east-1a&quot;:&quot;App-Subnet-AZ1&quot;,
  &quot;app-subnet-us-east-1b&quot;:&quot;App-Subnet-AZ2&quot;,
  &quot;db-subnet-us-east-1a&quot;:&quot;Database-Subnet-AZ1&quot;,
  &quot;db-subnet-us-east-1b&quot;:&quot;Database-Subnet-AZ2&quot;,
]

def subnetVars = [:]
String subnetVariables = &quot;&quot;

for(def subnetName : subnetNames){
  def subnet = getSubnetForName(subnetAWSNames.get(subnetName), subnetsResponse);
  subnetVariables+=&quot;variable \&quot;&quot; + subnetName + &quot;-id\&quot; {\n&quot;;
  subnetVariables+=&quot;    type = string\n&quot;;
  subnetVariables+=&quot;    default = \&quot;&quot;+ subnet.SubnetId +&quot;\&quot;\n&quot;;
  subnetVariables+=&quot;}\n&quot;;
  subnetVariables+=&quot;variable \&quot;&quot; + subnetName + &quot;-cidr\&quot; {\n&quot;;
  subnetVariables+=&quot;    type = string\n&quot;;
  subnetVariables+=&quot;    default = \&quot;&quot;+ subnet.CidrBlock +&quot;\&quot;\n&quot;;
  subnetVariables+=&quot;}\n&quot;;
}
def zoneId = build.buildVariableResolver.resolve(&quot;R53_Zone_ID&quot;)
subnetVariables+=&quot;&quot;&quot;
variable &quot;internal-dns-zone-id&quot; {
  type = string
  default = &quot;$zoneId&quot;
}
&quot;&quot;&quot;
def vpcId = build.buildVariableResolver.resolve(&quot;vpc_$stackId&quot;)
subnetVariables+=&quot;&quot;&quot;
variable &quot;target-vpc&quot; {
  type = string
  default = &quot;$vpcId&quot;
}
&quot;&quot;&quot;
def subnetGroupName = build.buildVariableResolver.resolve(&quot;db-subnet-group-name-$stackId&quot;)
subnetVariables+=&quot;&quot;&quot;
variable &quot;db-subnet-group-name&quot; {
  type = string
  default = &quot;$subnetGroupName&quot;
}
&quot;&quot;&quot;

println(subnetVariables)

new File(&quot;/var/jenkins_home/workspace/Update VPC Settings/subnet_variables_${stackId}.tf&quot;).write(subnetVariables)
}


def getSubnetForName(String name, def subnetsResponse){
  return subnetsResponse.Subnets.find(
    {it-&gt;it.Tags.find(
      {tag-&gt;return tag.Key.contentEquals(&quot;Name&quot;) &amp;&amp; tag.Value.contentEquals(name)}
    )}
  );
}</script>
          <sandbox>false</sandbox>
        </script>
      </source>
    </hudson.plugins.groovy.SystemGroovy>
    <hudson.tasks.Shell>
      <command># Push new subnet variables files to bucket

aws sts assume-role --duration-seconds 900 --role-arn $arn_role_cnc --role-session-name &quot;configure-vpc-settings&quot; &gt; assume-role-output.txt

export AWS_ACCESS_KEY_ID=`grep AccessKeyId assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SECRET_ACCESS_KEY=`grep SecretAccessKey assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`
export AWS_SESSION_TOKEN=`grep SessionToken assume-role-output.txt | cut -d &apos;:&apos; -f 2 | sed &quot;s/[ ,\&quot;]//g&quot;`

aws s3 cp subnet_variables_a.tf s3://$stack_s3_bucket/deployment_state_metadata/a/subnet_variables.tf 
aws s3 cp subnet_variables_b.tf s3://$stack_s3_bucket/deployment_state_metadata/b/subnet_variables.tf 

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>